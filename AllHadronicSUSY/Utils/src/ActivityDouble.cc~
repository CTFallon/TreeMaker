// -*- C++ -*-
//
// Package:    ActivityDouble
// Class:      ActivityDouble
// 
/**\class ActivityDouble ActivityDouble.cc RA2Classic/ActivityDouble/src/ActivityDouble.cc
 * 
 * Description: [one line class summary]
 * 
 * Implementation:
 *     [Notes on implementation]
 */
//
// Original Author:  Arne-Rasmus Draeger,68/111,4719,
//         Created:  Fri Apr 11 16:35:33 CEST 2014
// $Id$
//
//


// system include files

#include <cmath>
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/JetReco/interface/Jet.h"

#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include <TRandom2.h>
#include <vector>
#include <TVector2.h>
#include <TMath.h>
#include <math.h>
#include "TLorentzVector.h"

//
// class declaration
//



class ActivityDouble : public edm::EDProducer {
public:
	explicit ActivityDouble(const edm::ParameterSet&);
	~ActivityDouble();
	
	static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);
	
private:
	virtual void beginJob() ;
	virtual void produce(edm::Event&, const edm::EventSetup&);
	virtual void endJob() ;
	
	virtual void beginRun(edm::Run&, edm::EventSetup const&);
	virtual void endRun(edm::Run&, edm::EventSetup const&);
	virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
	virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
	edm::InputTag PFCandTag_;
	int method_;
	double deltaR(double eta1, double phi1, double eta2, double phi2);
	
	
	
	// ----------member data ---------------------------
};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//
// constructors and destructor
//
ActivityDouble::ActivityDouble(const edm::ParameterSet& iConfig)
{
	//register your produc
	PFCandTag_ 				= 	iConfig.getParameter<edm::InputTag >("PFCand");
	method_					=		iConfig.getParameter<int>          ("Method");
	
	produces<double>("");
}


ActivityDouble::~ActivityDouble()
{
	
	// do anything here that needs to be done at desctruction time
	// (e.g. close files, deallocate resources etc.)
	
}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
ActivityDouble::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
	using namespace edm;
	int Leptons=0;
	edm::Handle< edm::View<reco::LeafCandidate> > Cands;
	iEvent.getByLabel(PFCandTag_,Cands);
	if( !Cands.isValid() ) 
	{
		std::cout<<"Cands invalide, with tag: "<<PFCandTag_.label()<<std::endl;
	}
	edm::Handle<pat::PackedCandidate> pfcands;
	iEvent.getByLabel("packedPFCandidates", pfcands);
	edm::Handle<pat::Jet> patJets;
	iEvent.getByLabel("packedPFCandidates", patJets);
	if(Cands.isValid() && pfcands.isValid() && patJets.isValid() )
	{
		if(method_==0)
		{
			for (unsigned int i=0; i < JetsNum ; i++)
			{
				if(deltaR(elecEta,elecPhi,JetsEta[i],JetsPhi[i])>maxDeltaRElecActivity_ ) continue;
				result+=JetsPt[i] * (Jets_chargedHadronEnergyFraction[i]);
				//  			result+=JetsPt[i] * (Jets_chargedEmEnergyFraction[i] + Jets_chargedHadronEnergyFraction[i]);
			}
		}
		if(method_==1)
		{
			for (unsigned int i=0; i < JetsNum ; i++)
			{
				if(deltaR(elecEta,elecPhi,JetsEta[i],JetsPhi[i])>maxDeltaRElecActivity_ ) continue;
				result+=JetsPt[i] * (Jets_chargedHadronEnergyFraction[i])*(1/(deltaR(elecEta,elecPhi,JetsEta[i],JetsPhi[i])+0.5));
			}
		}
		if(method_==2)
		{
			for(unsigned int i=0; i< SelectedPFCandidatesNum; i++)
			{
				if(deltaR(elecEta,elecPhi,SelectedPFCandidatesEta[i],SelectedPFCandidatesPhi[i])>maxDeltaRElecActivity_ ) continue;
				result+=SelectedPFCandidatesPt[i];
			}
		}
		if(method_==3)
		{
			for(unsigned int i=0; i< SelectedPFCandidatesNum; i++)
			{
				if(SelectedPFCandidates_Charge[i]!=0) continue;
				if(deltaR(elecEta,elecPhi,SelectedPFCandidatesEta[i],SelectedPFCandidatesPhi[i])>maxDeltaRElecActivity_ ) continue;
				result+=SelectedPFCandidatesPt[i];
			}
		}
		return result;
	}
	
	std::auto_ptr<int> htp(new int(Leptons));
	
}

// ------------ method called once each job just before starting event loop  ------------
void 
ActivityDouble::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
ActivityDouble::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
ActivityDouble::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
ActivityDouble::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
ActivityDouble::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
ActivityDouble::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
ActivityDouble::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
	//The following says we do not know what parameters are allowed so do no validation
	// Please change this to state exactly what you do use, even if it is no parameters
	edm::ParameterSetDescription desc;
	desc.setUnknown();
	descriptions.addDefault(desc);
}

double ActivityDouble::deltaR(double eta1, double phi1, double eta2, double phi2)
{
	double deta = eta1-eta2;
	double dphi = TVector2::Phi_mpi_pi(phi1-phi2);
	return sqrt(deta * deta + dphi *dphi); 
}

//define this as a plug-in
DEFINE_FWK_MODULE(ActivityDouble);
